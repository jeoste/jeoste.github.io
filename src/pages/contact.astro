---
import Layout from "@/layouts/Layout.astro";
import Header from "@/components/Header.astro";
import Footer from "@/components/Footer.astro";
import Main from "@/layouts/Main.astro";
import IconLinkedin from "@/assets/icons/IconLinkedin.svg";
import IconMail from "@/assets/icons/IconMail.svg";
import IconGitHub from "@/assets/icons/IconGitHub.svg";
import IconArrowRight from "@/assets/icons/IconArrowRight.svg";

const pageTitle = "";
const pageDesc = "> Feel free to contact me for any inquiries.";

---

<Layout>
  <Header />
  <Main pageTitle={pageTitle} pageDesc={pageDesc}>
    <div class="prose prose-lg prose-slate dark:prose-invert">
      <h2>Contact form</h2>
    </div>



    <div class="mx-auto w-full max-w-3xl px-4 py-8">
      <section class="mb-12">
      <form id="contact-form" class="flex flex-col gap-6">
        <div>
          <label for="name" class="block mb-1 font-medium">Your name</label>
          <input id="name" name="name" type="text" required minlength="2" maxlength="50" placeholder="Enter your name" class="w-full rounded border border-border px-4 py-2 text-base focus:border-accent focus:ring-2 focus:ring-accent/20" autocomplete="name" />
        </div>
        <div>
          <div class="space-y-1">
            <label for="email" class="block font-medium">Your email - (so I can answer you)</label>
            <input 
              id="email" 
              name="email" 
              type="email" 
              required 
              placeholder="Enter your email address" 
              class="w-full rounded border border-border px-4 py-2 text-base focus:border-accent focus:ring-2 focus:ring-accent/20 aria-invalid:border-red-500 aria-invalid:ring-red-500/20" 
              autocomplete="email"
              aria-describedby="email-error" 
            />
            <p id="email-error" class="hidden text-sm text-red-500 mt-1" role="alert"></p>
          </div>
        </div>
        <div>
          <label for="message" class="block mb-1 font-medium">Your message</label>
          <textarea id="message" name="message" required minlength="10" maxlength="1000" rows="5" placeholder="Enter your message here..." class="w-full rounded border border-border px-4 py-2 text-base focus:border-accent focus:ring-2 focus:ring-accent/20"></textarea>
        </div>
        <div class="flex justify-center">
          <div 
            class="g-recaptcha" 
            data-sitekey={import.meta.env.PUBLIC_RECAPTCHA_SITE_KEY} 
            aria-label="reCAPTCHA verification"
            role="presentation"
            aria-hidden="false"
          ></div>
        </div>
        <button type="submit" id="send-btn"
          class="inline-flex items-center justify-center rounded-lg bg-accent/10 px-4 py-2 text-accent border border-accent/20 transition-all hover:bg-accent/20 hover:border-accent/40 w-full sm:w-auto font-semibold text-base focus:outline-none focus-visible:ring-2 focus-visible:ring-accent/50 focus-visible:ring-offset-2"
        >
          <span id="send-btn-text">Send</span>
          <svg id="loading-spinner" class="hidden animate-spin ml-2 h-4 w-4 text-accent" xmlns="http://www.w3.org/2000/svg" fill="none" viewBox="0 0 24 24" aria-hidden="true"><circle class="opacity-25" cx="12" cy="12" r="10" stroke="currentColor" stroke-width="4"></circle><path class="opacity-75" fill="currentColor" d="M4 12a8 8 0 018-8v4a4 4 0 00-4 4H4z"></path></svg>
          <IconArrowRight class="ml-2 h-4 w-4 flex-shrink-0" />
        </button>
        <p id="form-error" class="hidden text-red-600 font-semibold mt-2" aria-live="assertive">An error occurred. Please try again.</p>
      </form>
    </section>

    <section class="mb-8">
      <h2 class="text-xl font-semibold mb-4">Or contact me directly :</h2>
      <ul class="flex flex-col gap-3">
        <li class="flex items-center gap-2">
          <IconLinkedin class="h-5 w-5" />
          <a href="https://linkedin.com/in/jeoffrey-stephan/" target="_blank" class="hover:text-accent underline underline-offset-4">LinkedIn</a>
        </li>
        <li class="flex items-center gap-2">
          <IconMail class="h-5 w-5" />
          <a href="mailto:jeoffrey.stephan@gmail.com" class="hover:text-accent underline underline-offset-4">jeoffrey.stephan@gmail.com</a>
        </li>
        <li class="flex items-center gap-2">
          <IconGitHub class="h-5 w-5" />
          <a href="https://github.com/jeoste" target="_blank" class="hover:text-accent underline underline-offset-4">GitHub</a>
        </li>
      </ul>
    </section>
  </Main>
  <Footer />
</Layout>

<script is:inline>
  if (typeof window !== "undefined") {
    const form = document.getElementById('contact-form');
    const errorMsg = document.getElementById('form-error');
    const sendBtn = document.getElementById('send-btn');
    const sendBtnText = document.getElementById('send-btn-text');
    const spinner = document.getElementById('loading-spinner');
    const emailInput = document.getElementById('email');
    const emailError = document.getElementById('email-error');

    // Fonction de validation d'email
    const isValidEmail = (email) => {
      const re = /^(([^<>()[\]\\.,;:\s@"]+(\.[^<>()[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
      return re.test(String(email).toLowerCase());
    };

    // Validation de l'email en temps réel
    emailInput?.addEventListener('input', (e) => {
      const email = e.target.value;
      if (email === '') {
        emailError.textContent = 'Email is required';
        emailError.classList.remove('hidden');
        emailInput.setAttribute('aria-invalid', 'true');
      } else if (!isValidEmail(email)) {
        emailError.textContent = 'Please enter a valid email address';
        emailError.classList.remove('hidden');
        emailInput.setAttribute('aria-invalid', 'true');
      } else {
        emailError.classList.add('hidden');
        emailInput.removeAttribute('aria-invalid');
      }
    });

    // Fonction pour afficher les notifications Sonner
    const showNotification = (type, message) => {
      // Essayer d'utiliser la fonction globale showToast
      if (typeof window !== "undefined" && window.showToast) {
        window.showToast(type, message);
        return;
      }

      // Attendre que Sonner soit disponible
      const waitForSonner = () => {
        if (typeof window !== "undefined" && window.toast) {
          window.toast[type](message);
          return true;
        }
        return false;
      };

      // Essayer immédiatement
      if (waitForSonner()) return;

      // Si pas disponible, attendre un peu et réessayer
      setTimeout(() => {
        if (waitForSonner()) return;
        
        // Si toujours pas disponible après 1 seconde, utiliser un fallback
        setTimeout(() => {
          if (waitForSonner()) return;
          
          // Fallback final : alert ou console
          if (type === 'success') {
            alert('✅ ' + message);
          } else if (type === 'error') {
            alert('❌ ' + message);
          }
        }, 1000);
      }, 100);
    };

    if (form && errorMsg && sendBtn && sendBtnText && spinner && emailInput && emailError) {
      form.addEventListener('submit', async function(e) {
        e.preventDefault();
        
        // Validation de l'email avant l'envoi
        const email = emailInput.value;
        if (email === '') {
          emailError.textContent = 'Email is required';
          emailError.classList.remove('hidden');
          emailInput.setAttribute('aria-invalid', 'true');
          showNotification('error', 'Veuillez saisir votre adresse email.');
          emailInput.focus();
          return;
        }
        if (!isValidEmail(email)) {
          emailError.textContent = 'Please enter a valid email address';
          emailError.classList.remove('hidden');
          emailInput.setAttribute('aria-invalid', 'true');
          showNotification('error', 'Veuillez saisir une adresse email valide.');
          emailInput.focus();
          return;
        }

        // Vérification du captcha
        if (typeof grecaptcha === 'undefined') {
          errorMsg.textContent = 'Captcha is not loaded. Please refresh the page.';
          errorMsg.classList.remove('hidden');
          showNotification('error', 'Le captcha n\'est pas chargé. Veuillez rafraîchir la page.');
          return;
        }

        const recaptchaToken = grecaptcha.getResponse();
        if (!recaptchaToken) {
          errorMsg.textContent = 'Please validate the captcha.';
          errorMsg.classList.remove('hidden');
          showNotification('error', 'Veuillez valider le captcha.');
          return;
        }

        // Préparation de l'envoi
        errorMsg.classList.add('hidden');
        sendBtn.disabled = true;
        sendBtnText.classList.add('opacity-50');
        spinner.classList.remove('hidden');

        // Données du formulaire
        const data = {
          name: form.name.value,
          email: form.email.value,
          message: form.message.value,
          recaptchaToken: recaptchaToken
        };

        try {
          // Envoi de la requête
          const response = await fetch('/api/send-mail', {
            method: 'POST',
            headers: {
              'Content-Type': 'application/json',
            },
            body: JSON.stringify(data)
          });

          const result = await response.json();

          if (response.ok) {
            // Succès
            showNotification('success', 'Message has been sent successfully ! I will answer you as soon as possible.');
            errorMsg.classList.add('hidden');
            form.reset();
            grecaptcha.reset();
          } else {
            // Erreur avec message du serveur
            throw new Error(result.error || 'Échec de l\'envoi du message');
          }
        } catch (error) {
          // Erreur technique
          // console.error supprimé pour la production
          const errorMessage = error.message || 'Une erreur est survenue lors de l\'envoi de votre message.';
          showNotification('error', errorMessage);
          errorMsg.textContent = errorMessage;
          errorMsg.classList.remove('hidden');
        } finally {
          // Réinitialisation de l'interface
          sendBtn.disabled = false;
          sendBtnText.classList.remove('opacity-50');
          spinner.classList.add('hidden');
        }
      });
    }
  }
</script>